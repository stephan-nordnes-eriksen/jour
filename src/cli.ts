#!/usr/bin/env node
// import meow from 'meow';
import { Command } from 'commander'

// import unicornFun from 'unicorn-fun';
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url';
import { openFile } from './crossPlatformFileOpener.js'
import { Template, TemplateData } from './template.js'

const program = new Command();
program
//.argument('<words...>')
.action(()=>{
	console.log('are we here?')
	// does not seem to work
})
.option('-d, --dir <directory>', 'Setup journal directory')
.option('-c, --config <configuration-file>', 'Set configuratoin file')
.option('-t, --template <template-name>', 'which template to use', 'memo')
.option('-igs, --initialize-git-storage <git-repo-url>', 'Initialize git storage solution on current journal directory')
.action((url: string) => {
	console.log('Url', url)
})
.option('-s, --save', 'save all modified journals with provided storage solution')
.option('-u, --upload', 'Upload saved journal entries to provided storage solution')
.option('--delete', 'Upload saved journal entries to provided')

.addHelpText('after', `
Examples:
$ journal --dir ./my/desired/journal/directory
	Setup your journal to target this folder
$ journal
	creates a new journal entry, tagged today.
$ journal This is my journal title entry
	creates a new journal entry, tagged today, with the provided written title.
$ journal --template=memo Todays Title
	creates a new journal entry from template name memo
$ journal --template-path <path-to-template-folder>
	Set your desired template folder
$ journal --config <path-to-config-file>
	Set your desired config file.
`
  );


program.parse(process.argv)

console.log('program.args', program.args)
// const cli = meow(`
// 	Usage
// 		$ journal
// 		$ journal <title>
// 	Options
// 		--template  Which template to use. Only one now  [Default: memo]
// 		--dir		Setup journal directory
// 	Examples
// 		$ journal --dir ./my/desired/journal/directory
// 			Setup your journal to target this folder
// 		$ journal
// 			creates a new journal entry, tagged today.
// 		$ journal This is my journal title entry
// 			creates a new journal entry, tagged today, with the provided written title.
// 		$ journal --template=memo Todays Title
// 			creates a new journal entry from template name memo
// 		$ journal --template-path <path-to-template-folder>
// 			Set your desired template folder
// 		$ journal --config <path-to-config-file>
// 			Set your desired config file.
// `, {
// 	// input: ['setup', 'new'],
// 	importMeta: import.meta,
// 	flags: {
// 		dir: {
// 			type: 'string',
// 			alias: 'd'
// 		},
// 		template: {
// 			type: 'string',
// 			alias: 't',
// 			default: 'memo'
// 		}
// 	}
// });
// console.log('cli.flags.template',cli.flags.template)

const randomAwesomeShorts = [
	"Ran a marathon",
	"Had dinner with family",
	"Hiked a mountain",
]
function journalTemplate(currentDate: Date, title = ""){
	const currentDateString = currentDate.toDateString()
	const journalTemplateData: TemplateData = {
		entryTitle: 'Journal',
		date: currentDate,
		currentDateString: currentDateString,
		title: title || randomAwesomeShorts[Math.round(Math.random() * randomAwesomeShorts.length)],
		long: "",
		footer: "Generated by Journal.cli",
	}
	return Template.processTemplateName('memo', journalTemplateData)
}
function getJournalSettingsPath(){
	return path.join(__dirname, 'journal.settings')
}
function getJournalPath(){
	const settingsPath = getJournalSettingsPath()
	if(!fs.existsSync(settingsPath)){
		return ""
	}
	return fs.readFileSync(settingsPath).toString()
}
// const __filename = fileURLToPath(import.meta.url);
// const __dirname = path.dirname(__filename);

const programOptions = program.opts();
console.log('programOptions', programOptions)
function runCli(){
	if(programOptions.dir){
		const journalPath = programOptions.dir
		if(!journalPath){
			console.log('Please provide a valid path')
			return
		}
		let absoluteJournalPath = journalPath
		if(!fs.existsSync(journalPath)){
			absoluteJournalPath = fileURLToPath(path.join(process.cwd(), journalPath))
		} else {
			absoluteJournalPath = fs.realpathSync(absoluteJournalPath)
		}
		fs.writeFileSync(getJournalSettingsPath(), absoluteJournalPath)
		console.log('Journal location saved to', absoluteJournalPath)
	} else {
		const journalDirectory = getJournalPath()
		if(!journalDirectory || !fs.existsSync(journalDirectory)) {
			console.log('Journal directory not available. Setup with `journal setup <path>`')
			return
		}
		// const title = cli?.input?.join(' ') || ''
		const title = program?.args?.join(' ') || ''

		const currentDate = new Date()
		const template = journalTemplate(currentDate, title)
		if(!template){
			return
		}
		let journalEntryPath = path.join(journalDirectory, `journal-${currentDate.toDateString().split(' ').join('-')}.md`)
		if(fs.existsSync(journalEntryPath)){
			journalEntryPath = journalEntryPath.slice(0, -3) + '-' + currentDate.getTime() + '.md'
		}
		fs.writeFileSync(journalEntryPath, template)
		openFile(journalEntryPath)
		console.log('Journal set created at', journalEntryPath)
	}
}
runCli()
